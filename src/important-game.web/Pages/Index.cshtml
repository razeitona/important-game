@page
@using System.Globalization
@model IndexModel
@{
    ViewData["Title"] = "Excitment Matches";
}
<div class="watch-explanation">
    <p>
        <b><i>Exciment Score (ES)</i></b> is an indication of how enthusiastic and excited the match might be worth to watch. It takes into consideration different factors such as league table, <i>head to head</i> and many others.
    </p>
    <p> With values closer to <i>100</i> it's expected to be an interesting match to watch, while a value closer to <i>0</i> might not be so excited to watch.</p>
</div>


<div class="match-section">
    <div class="match-content-title">
        <h5>Match of the Week</h5>
    </div>
    <div class="match-section-content">
        <div class="match-section-slider">
            @if (Model.Matches.WeekMatches.Count == 0)
            {
                <label>No Exctiment Match to happen</label>
            }
            else
            {
                foreach (var match in Model.Matches.WeekMatches)
                {
                    <partial name="_MatchCard" for="@match" />
                }
            }
        </div>
    </div>
</div>


<div class="match-section">
    <div class="match-content-title">
        <h5>Live Games</h5>
    </div>
    <div class="match-section-content">
        <div class="match-section-slider">
            @if (Model.Matches.LiveGames.Count == 0)
            {
                <label>No Live Matches</label>
            }
            else
            {
                foreach (var match in Model.Matches.LiveGames)
                {
                    <partial name="_MatchCard" for="@match" />
                }
            }
        </div>
    </div>
</div>


<div class="match-section">
    <div class="match-content-title">
        <h1>Upcoming Games</h1>
        <a href="calendar">See all</a>
    </div>
    <div class="match-section-content">
        <div class="match-section-slider">
            @if (Model.Matches.UpcomingMatch.Count == 0)
            {
                <label>No Upcoming Matches</label>
            }
            else
            {
                foreach (var match in Model.Matches.UpcomingMatch)
                {
                    <partial name="_MatchCard" for="@match" />
                }
            }
        </div>
    </div>
</div>

@* <div class="watch-menu">
    <div class="watch-menu-option">
        <span class="watch-menu-option-item">
            <i class="es-table"></i> Calendar
        </span>
        <span class="watch-menu-option-item">
            <i class="es-table"></i> Leagues
        </span>
    </div>
</div> *@


@section Scripts {

    <script>


        $(document).ready(function () {
            $("time").each(function (elem) {
                var utctimeval = $(this).html().trim();
                var date = new Date(utctimeval);
                var optionsDate = {
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                };
                var optionsTime = {
                    hour: "numeric",
                    minute: "numeric",
                };
                $(this).html(date.toLocaleString("pt", optionsDate) + " " + date.toLocaleString("pt", optionsTime));
            });


            // let isDown = false;
            // let startX, scrollLeft;
            $('.match-section-slider').each(function () {

                var slider = $(this);
                console.log(slider);

                slider.mousedown(function (e) {
                    var startX = e.pageX - slider.offset().left;
                    var scrollLeft = slider.scrollLeft();
                    $(this).addClass('active');
                    $(this).attr("startX", startX);
                    $(this).attr("scrollLeft", scrollLeft);
                    $(this).attr("isDown", true);
                });

                slider.mouseleave(function () {
                    $(this).removeClass('active');
                    $(this).attr("isDown", false);
                });

                slider.mouseup(function () {
                    isDown = false;
                    $(this).removeClass('active');
                    $(this).attr("isDown", false);
                });

                slider.mousemove(function (e) {
                    var isDown = $(this).attr("isDown");

                    if (!isDown) return;
                    e.preventDefault();

                    var startX = $(this).attr("startX");
                    var scrollLeft = $(this).attr("scrollLeft");

                    const x = e.pageX - $(this).offset().left;
                    const walk = (x - startX) * 2; // Adjust scrolling speed
                    $(this).scrollLeft(scrollLeft - walk);
                });

            });


        });

        // let slider = document.querySelector(".match-upcoming-content");
        // let innerSlider = document.querySelector(".match-upcoming-slider");

        // let pressed = false;
        // let startx;
        // let x;


        // innerSlider.addEventListener("mousedown", (e) => {
        //     pressed = true;
        //     startx = e.offsetX - innerSlider.offsetLeft;
        //     console.log(`OffsetX: ${e.offsetX}, InnerSlider OffsetLeft: ${innerSlider.offsetLeft}`);
        //     slider.style.cursor = "grabbing";
        // });

        // slider.addEventListener("mouseenter", () => {
        //     slider.style.cursor = "grab";
        // });

        // slider.addEventListener("mouseup", () => {
        //     slider.style.cursor = "grab";
        // });

        // window.addEventListener("mouseup", () => {
        //     pressed = false;
        // });

        // slider.addEventListener("mousemove", (e) => {
        //     if (!pressed) return;
        //     e.preventDefault();

        //     x = e.offsetX;
        //     console.log(`x: ${x}, startx: ${startx}`);
        //     console.log(`Diff: ${x - startx}`);

        //     innerSlider.style.left = `${x - startx}px`;
        //     checkBoundary();
        // });

        // function checkBoundary(x, startx) {
        //     let outer = slider.getBoundingClientRect();
        //     let inner = innerSlider.getBoundingClientRect();

        //     if (parseInt(innerSlider.style.left) > 0) {
        //         innerSlider.style.left = "0px";
        //     }
        //     if (inner.right < outer.right) {
        //         innerSlider.style.left = `-${inner.width - outer.width}px`;
        //     }
        // }


    </script>
}